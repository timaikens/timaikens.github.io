{"version":3,"sources":["components/LoadingIndicator.js","components/Table.js","components/App.js","index.js"],"names":["LoadingIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dots","animInterval","_this2","window","setInterval","console","log","setState","prevState","clearInterval","react_default","a","createElement","style","position","fontWeight","fontSize","baseMessage","left","Component","defaultProps","Table","tBodyStyle","isTouch","borderTop","rowStyle","display","padding","borderBottom","cellStyle","borderCollapse","headRow","map","cell","key","dataRows","row","id","data","index","button","paddingLeft","disabled","onClick","handler","whiteSpace","text","App","antAttributes","oddsStatusKey","pre","during","post","ants","loading","innerWidth","fetchAllAntsData","bind","assertThisInitialized","addEventListener","useBackupUrl","_this3","antsUrlBase","antsQuery","concat","join","antsUrl","encodeURIComponent","replace","fetch","then","response","ok","Error","statusText","json","jsonData","modifiedAntsData","ant","i","odds","oddsStatus","calculateOdds","delay","Math","random","likelihoodOfAntWinning","callback","setTimeout","generateAntWinLikelihoodCalculator","catch","error","_this4","filter","forEach","psAnt","round","arr","_this5","fullAntAttributes","allOddsStatus","every","allOddsBtnDisabled","tableHeadRow","attribute","charAt","toUpperCase","slice","tableDataRows","sort","item1","item2","odds1","odds2","parseFloat","justifyContent","alignItems","top","right","bottom","components_LoadingIndicator","flexDirection","margin","paddingBottom","paddingRight","components_Table","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.76e43d83.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass LoadingIndicator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dots: ''\n    };\n\n    this.animInterval = null;\n  }\n\n  componentDidMount() {\n    this.animInterval = window.setInterval(() => {\n      console.log('ellipsis itvl');\n      this.setState(prevState => {\n        return {\n          dots: prevState.dots === '...' ? '.' : prevState.dots + '.'\n        };\n      });\n    }, 300);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.animInterval);\n    this.animInterval = null;\n  }\n\n  render() {\n    return (\n      <span style={{\n        position: 'relative',\n        fontWeight: 'bold',\n        fontSize: '1.25em',\n      }}>\n        {this.props.baseMessage}\n        <span style={{\n          position: 'absolute',\n          left: '100%'\n        }}>\n          {this.state.dots}\n        </span>\n      </span>\n    );\n  }\n}\n\nLoadingIndicator.defaultProps = {\n  baseMessage: 'Loading'\n};\n\nexport default LoadingIndicator;","import React from 'react';\n\nfunction Table(props) {\n\n  const tBodyStyle = props.isTouch ? {\n    borderTop: '1px solid lightgrey',\n  } : {};\n\n  const rowStyle = props.isTouch ? {\n    display: 'block',\n    padding: '16px 0',\n    borderBottom: '1px solid lightgrey',\n  } : {};\n\n  const cellStyle = props.isTouch ? {\n    display: 'block',\n    padding: '8px 0',\n  } : {\n    padding: '8px 24px',\n    borderBottom: '1px solid lightgrey',\n  };\n\n  return (\n    <table style={{\n      borderCollapse: 'collapse',\n    }}>\n      <tbody style={tBodyStyle}>\n        {!props.isTouch && (\n          <tr style={rowStyle}>\n            {props.headRow.map(cell => (\n              <th key={cell} style={cellStyle}>\n                {cell}\n              </th>\n            ))}\n          </tr>\n        )}\n        {props.dataRows.map(row => {\n          return (\n            <tr key={row.id} style={rowStyle}>\n              {row.data.map((cell, index) => (\n                <td key={row.id + '-' + cell} style={cellStyle}>\n                  {props.isTouch ? (\n                    <span>\n                      <strong>{props.headRow[index]}: </strong>\n                      {cell}\n                    </span>\n                  ) : cell}\n                </td>\n              ))}\n              {row.button && (\n                <td style={props.isTouch ? cellStyle : {\n                  paddingLeft: 16,\n                }}>\n                  <button\n                    disabled={row.button.disabled}\n                    onClick={row.button.handler}\n                    style={{ whiteSpace: 'nowrap' }}\n                  >\n                    {row.button.text}\n                  </button>\n                </td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { Component } from 'react';\n\nimport LoadingIndicator from './LoadingIndicator'\nimport Table from './Table'\n\n\n/*\n * Helper functions\n */\n\n// Sorts array of objects by the odds property of each\nfunction sortByOdds(arr) {\n  return arr.sort((item1, item2) => {\n    const odds1 = item1.odds;\n    const odds2 = item2.odds;\n\n    if (odds1 != null && odds2 != null) {\n      return parseFloat(odds1) > parseFloat(odds2) ? -1 : 1;\n    } else if (odds1 != null || odds2 != null) {\n      return odds1 != null ? -1 : 1;\n    }\n    return 0;\n  });\n}\n\n// Simulates odds of winning\nfunction generateAntWinLikelihoodCalculator() {\n  var delay = 7000 + Math.random() * 7000;\n  var likelihoodOfAntWinning = Math.random();\n\n  return function(callback) {\n    setTimeout(function() {\n      callback(likelihoodOfAntWinning);\n    }, delay);\n  };\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // Will use this to fetch from API and populate view\n    this.antAttributes = [\n      'name',\n      'length',\n      'color',\n      'weight',\n    ];\n\n    // Must include keys `pre`, `during` and `post`, but messages can change\n    this.oddsStatusKey = {\n      pre: 'not yet run',\n      during: 'in progress',\n      post: 'all calculated'\n    };\n\n    this.state = {\n      ants: [],\n      loading: true,\n      isTouch: window.innerWidth < 972,\n    };\n\n    this.fetchAllAntsData = this.fetchAllAntsData.bind(this);\n  }\n\n  componentDidMount() {\n    // Add resize listener to set touch styles\n    window.addEventListener('resize', () => {\n      const isTouch = window.innerWidth < 972;\n      if (this.state.isTouch !== isTouch) {\n        this.setState({\n          isTouch: window.innerWidth < 972,\n        });\n      }\n    });\n\n    this.fetchAllAntsData();\n  }\n\n  fetchAllAntsData(useBackupUrl) {\n\n    const primaryUrl = 'https://antserver-blocjgjbpw.now.sh/graphql';\n    // Was getting CORS error with backup URL\n    const backupUrl = 'https://cors-anywhere.herokuapp.com/' + 'https://guarded-shore-81814.herokuapp.com/graphql';\n    const antsUrlBase = useBackupUrl ? backupUrl : primaryUrl;\n\n    const antsQuery = `\n      {\n        ants {\n          ${this.antAttributes.join(' ')}\n        }\n      }\n    `;\n\n    // Build the query string, collapsing some whitespace\n    const antsUrl = antsUrlBase + '?query=' + encodeURIComponent(antsQuery.replace(/\\s\\s+/g, ' '));\n\n    // Modify returned JSON data and set the state (callback for fetch)\n    const setStateAnts = (jsonData) => {\n      if (jsonData && jsonData.data && jsonData.data.ants) {\n        const modifiedAntsData = jsonData.data.ants.map((ant, i) => {\n          // Let's give each ant a unique ID - normally this would come from the database\n          // (Could use name, but theoretically names could overlap)\n          ant.id = i + 1;\n          ant.odds = null;\n          ant.oddsStatus = this.oddsStatusKey.pre;\n          // Method of each ant to calculate odds of winning.\n          // Accepts a callback that takes the odds as its one parameter\n          ant.calculateOdds = generateAntWinLikelihoodCalculator();\n          return ant;\n        });\n\n        this.setState({\n          ants: modifiedAntsData,\n          loading: false\n        });\n      }\n    };\n\n    fetch(antsUrl)\n      // This method handles more errors than just network or permissions (e.g., 404)\n      // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful\n      .then(response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      })\n      .then(response => response.json())\n      .then(setStateAnts)\n      .catch((error) => {\n        console.log(error);\n        // If this was our first try, let's hit the backup URL for a second try\n        if (!useBackupUrl) {\n          this.fetchAllAntsData(true);\n        } else {\n          // Handle fetch errors - we'll show a user friendly message below the form\n          this.setState({\n            loading: false\n          });\n        }\n      });\n  }\n\n  // Calculates odds for an array of ants\n  calculateOdds(ants) {\n    // Make sure we only run on ants who haven't had odds calculated\n    ants = ants.filter(ant => {\n      return ant.oddsStatus === this.oddsStatusKey.pre;\n    });\n\n    ants.forEach(ant => {\n\n      // Set odds status message to 'in progress'\n      this.setState((prevState) => {\n        return {\n          ants: prevState.ants.map(psAnt => {\n            if (psAnt === ant) {\n              psAnt.oddsStatus = this.oddsStatusKey.during;\n            }\n            return psAnt;\n          })\n        };\n      });\n\n      // Calculate odds, then set odds state\n      ant.calculateOdds((odds) => {\n        this.setState((prevState) => {\n          return {\n            ants: prevState.ants.map(psAnt => {\n              if (psAnt === ant) {\n                psAnt.oddsStatus = this.oddsStatusKey.post;\n                // Round to two decimal places\n                psAnt.odds = (Math.round(odds*10000) / 100) + '%';\n              }\n              return psAnt;\n            })\n          };\n        });\n      });\n\n    });\n\n  }\n\n  // Calculates odds for all ants\n  calculateAllOdds() {\n    this.calculateOdds(this.state.ants);\n  }\n\n  render() {\n\n    const isTouch = this.state.isTouch;\n\n    // This could be done elsewhere\n    const fullAntAttributes = this.antAttributes.concat('odds');\n\n    const allOddsStatus = (() => {\n      if (this.state.ants.every(ant => ant.oddsStatus === this.oddsStatusKey.post)) {\n        return this.oddsStatusKey.post;\n      } else if (this.state.ants.every(ant => ant.oddsStatus === this.oddsStatusKey.pre)) {\n        return this.oddsStatusKey.pre;\n      } else {\n        return this.oddsStatusKey.during;\n      }\n    })();\n\n    const allOddsBtnDisabled = allOddsStatus === this.oddsStatusKey.post || (\n      allOddsStatus === this.oddsStatusKey.during &&\n      this.state.ants.every(ant => ant.oddsStatus !== this.oddsStatusKey.pre)\n    );\n\n    const tableHeadRow = fullAntAttributes.map(attribute => {\n      return attribute.charAt(0).toUpperCase() + attribute.slice(1);\n    });\n\n    const tableDataRows = sortByOdds(this.state.ants).map(ant => {\n      return {\n        id: ant.id,\n        data: fullAntAttributes.map((attribute, index) => {\n          if (attribute === 'odds') {\n            return ant.odds != null ? ant.odds : (<em>{ant.oddsStatus}</em>);\n          }\n          return ant[attribute];\n        }),\n        button: {\n          handler: () => this.calculateOdds([ant]),\n          text: 'Calculate Odds',\n          disabled: ant.oddsStatus !== this.oddsStatusKey.pre,\n        }\n      };\n    });\n\n    if (this.state.loading) {\n      return (\n        <div style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          position: 'fixed',\n          top: 0,\n          right: 0,\n          bottom: '40vh',\n          left: 0,\n        }}>\n          <LoadingIndicator baseMessage=\"Fetching racers\" />\n        </div>\n      );\n    }\n\n    return (\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        padding: 24,\n      }}>\n        <div style={{\n          display: 'inline-flex',\n          flexDirection: 'column',\n          alignItems: 'flex-start',\n        }}>\n\n          <h1 style={isTouch ? {} : {\n            paddingLeft: 24,\n          }}>\n            Ant Racers\n          </h1>\n\n          <div style={{\n            display: 'inline-flex',\n            flexDirection: 'column',\n            alignItems: isTouch ? 'flex-start' : 'flex-end',\n            margin: '0 auto',\n          }}>\n\n            <div style={{\n              paddingBottom: 24,\n              display: isTouch ? 'flex' : '',\n              flexDirection: 'row-reverse',\n              alignItems: 'center',\n            }}>\n              <span style={isTouch ? {\n                paddingLeft: 16,\n              } : {\n                paddingRight: 16,\n              }}>\n                <em>{allOddsStatus}</em>\n              </span>\n              <button\n                disabled={allOddsBtnDisabled}\n                onClick={() => this.calculateOdds(this.state.ants)}\n              >\n                Calculate All Odds\n              </button>\n            </div>\n\n            <Table\n              headRow={tableHeadRow}\n              dataRows={tableDataRows}\n              isTouch={isTouch}\n            />\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}